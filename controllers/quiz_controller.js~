// Get /quizes/question
var models=require('../models/models.js');

// Autoload
exports.load = function(req, res, next, quizId){
models.Quiz.find({
where: { id: Number(quizId)},
include: [{model: models.Comment }]
}).then(
function(quiz) {
if(quiz){
req.quiz = quiz;
next();
}else{ next(new Error('No existe quizId='+quizId));
}
}
).catch(function(error){next(error);});
};



// Get /quizes/:id
exports.show = function(req, res) {
 var marca = "desmarcado";
 if (req.session.user) {
 models.Favourites.find({ where: { UserId: Number(req.session.user.id), QuizId: Number(req.quiz.id) }})
 .then(function(favorito) {
 if (favorito) {marca = "marcado";};
res.render('quizes/show', { quiz: req.quiz, marca: marca, errors: []});
 });
} else {
 res.render('quizes/show', { quiz: req.quiz, marca: marca, errors: []});
 }
};
// Get /quizes/:id
exports.edit = function(req,res){
var quiz = req.quiz;//Autoload de instancia de quiz
res.render('quizes/edit', {quiz: quiz,errors: []});

};



// Get /quizes/:id/answer
exports.answer = function(req,res){
var resultado ='Incorrecto';

if(req.query.respuesta === req.quiz.respuesta){
	resultado='Correcto';
}
res.render('quizes/answer', {quiz:req.quiz, respuesta:resultado ,errors: []});

};


// Get /quizes
 exports.index = function(req, res) {
var cadena = "";
var options = {};
var marca = [];
var favoritos = [];

if(req.user){
options.where = {UserId: req.user.id}

 };

 if (req.session.user) {
models.Favourites.findAll({ where: { UserId: Number(req.session.user.id) }})
 .then(function(f) { favoritos = f;
if (req.query.search === undefined) {
 models.Quiz.findAll(options).then(function(quizes) {
 for (j in quizes) {
 marca[j] = "desmarcado";
 for (k in favoritos) {
 if (favoritos[k].QuizId === quizes[j].id) {marca[j] = "marcado";}
 }
}
 res.render('quizes/index', { quizes: quizes, marca: marca, errors: []});
 }).catch(function(error) { next(error);});
 } else {
 cadena = '%'+req.query.search+'%';
 cadena = cadena.replace(/ /g, '%');
 models.Quiz.findAll({where: ["pregunta like ?", cadena], order: ['pregunta']})
.then(function(quizes) {
 for (j in quizes) {
 marca[j] = "desmarcado";
 for (k in favoritos) {
if (favoritos[k].QuizId === quizes[j].id) {marca[j] = "marcado";}
}
 }
 res.render('quizes/index', { quizes: quizes, marca: marca, errors: []});
 }).catch(function(error) { next(error);});
 }
 });
} else {
 if (req.query.search === undefined) {
 models.Quiz.findAll(options).then(function(quizes) {
 res.render('quizes/index', { quizes: quizes, marca: marca, errors: []});
 }).catch(function(error) { next(error);});
 } else {
cadena = '%'+req.query.search+'%';
 cadena = cadena.replace(/ /g, '%');
 models.Quiz.findAll({where: ["pregunta like ?", cadena], order: ['pregunta']})
 .then(function(quizes) {
res.render('quizes/index', { quizes: quizes, marca: marca, errors: []});
 }).catch(function(error) { next(error);});
 }
}
};


// GET /quizes/new

exports.new = function(req,res){
var quiz = models.Quiz.build( // crea objeto id
{pregunta : "Pregunta", respuesta : "Respuesta"}
);
res.render('quizes/new', {quiz: quiz,errors:[]});
};

// POST /quizes/create



exports.create = function(req, res){
req.body.quiz.UserId = req.session.user.id;
if(req.files.image){
req.body.quiz.image = req.files.image.name;
}
var quiz = models.Quiz.build( req.body.quiz );
quiz
.validate()
.then(function(err){
if(err){
res.render('quizes/new', {quiz: quiz, errors: err.errors});
}else{
quiz
.save({fields: ["pregunta", "respuesta","UserId", "image"]})
.then(function(){
res.redirect('/quizes')})
}
});
};

// PUT /quizes/:id
exports.update = function(req,res){
if(req.files.image){
req.body.quiz.image = req.files.image.name;
}
req.quiz.pregunta = req.body.quiz.pregunta;
req.quiz.respuesta = req.body.quiz.respuesta;
req.quiz
.validate()
.then(
function(err){
if(err){
res.render('quizes/edit', {quiz: req.quiz, errors: err.errors});
}else{
req.quiz
.save( {fields: ["pregunta", "respuesta", "image"]})
.then( function(){ res.redirect('/quizes');});
}
}
);
};

// MW permite acciones solamente si el quiz objeto pertenece al usuario logueado o si es cuenta admin
exports.ownershipRequired = function(req,res,next){
var objQuizOwner = req.quiz.UserId;
var logUser = req.session.user.id;
var isAdmin = req.session.user.isAdmin;
if(isAdmin || objQuizOwner === logUser){
next();
}else{
res.redirect('/');
}
};

// DELETE /quizes/:id
exports.destroy = function(req,res){
req.quiz.destroy().then(function(){
res.redirect('/quizes');
}).catch(function(error){next(error)});
};

